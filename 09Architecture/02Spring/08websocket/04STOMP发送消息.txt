# STOMP 发送消息到客户端

WebSocket 通常视为服务器发送数据给浏览器的一种方式，采用这种方式所发送的数据不必位于HTTP请求的响应中。

Spring 提供了两种发送数据给客户端的方法：
- 作为处理消息或处理订阅的附带结果
- 使用消息模板

## 处理消息之后发送消息

```java
@MessageMapping("/marco")
public Shout handleShout(Shout incoming){
	Shout outgoing = new Shout() ;
	outgoing.setMessage("polo") ;
	return outgoing;
}
```

当`@MessageMapping`所标注的方法有返回值时，返回的对象会进行转换（通过消息转换器）并放入到 STOMP 帧的负载中，然后发送给消息代理。

默认情况下，帧所发往的目的地会与触发处理器方法的目的地相同，不过会添加上`/topic`前缀，就该例而言，意味着返回的 Shout 对象会写入到 STOMP 帧的负载中，并发布到`/topic/marco`目的地。

### 重载目的地

可以通过为方法添加`@SendTo`注解重载目的地
```java
@MessageMapping("/marco")
@SendTo("topic/shout") 
public Shout shoutHandle(Shout shout){...}
```

按照这个`@SendTo`注解，消息将会发布到`/topic/shout`所有订阅该主题的应用都会收到这条消息。

按照类似的方式，`@SubscribeMapping`注解也可以发送消息，作为订阅的回应。不过`@SubscribeMapping`的区别在于消息会直接返回给客户端，而不必经过消息代理，但是如果增加`@SendTo`的时候，那么消息会发送到指定目的地，会经过代理。

